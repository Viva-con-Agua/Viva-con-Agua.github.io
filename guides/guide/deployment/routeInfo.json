{"path":"guides/guide/deployment","templateID":6,"sharedPropsHashes":{},"localProps":{"guide":{"title":"Deploy Pool² for Development","slug":"guide/deployment","contents":"<h1 id=\"deploy-pool-for-development\">Deploy Pool² for Development</h1>\n<h2 id=\"install-docker\">Install Docker</h2>\n<p>The Pool² implements its microservice architecture using <a href=\"https://www.docker.com/\">docker</a> that can easily setup on the \nmost operating systems. Guides can be found at the <a href=\"https://docs.docker.com/install/\">docker documentation</a>. You need to \ninstall the <code>docker-ce</code> package. Don&#39;t worry about stage and edge version, it works fine with both. The staging server \nuses <a href=\"https://www.debian.org/index.de.html\">debian</a> as operating system. If you want to deploy the Pool² as development \nsystem it makes sense to setup a virtual machine (VM) via <a href=\"https://www.virtualbox.org/\">VirtualBox</a> or \n<a href=\"https://www.vmware.com/de.html\">vmware</a>. There are a lot of guides online, that can help you to setup a VM.<br />\n<strong><em>Notice:</em></strong> The scripts you need to setup the Pool² development system are written for <code>bash</code> on a linux system.</p>\n<p>After setting up the VM and docker-ce, you can start the docker service using <code>sudo systemctl start docker.service</code>. Next \nyour system user need access to docker.service. </p>\n<p>For Ubuntu:</p>\n<pre><code class=\"lang-bash\">    sudo groupadd docker\n    sudo useradd username\n    sudo usermod -aG docker username \n</code></pre>\n<p>(Replace <code>username</code>)</p>\n<h2 id=\"using-the-pool-scripts\">Using the Pool² scripts</h2>\n<p>For deployment of the Pool², you can use the <a href=\"https://github.com/Viva-con-Agua/pool2-deployment-scripts\">pool2-deployment-scripts</a>. \nThese scripts are hosted on <a href=\"https://github.com/\">GitHub</a>. If you want to deploy for development, you need the <code>develop</code> \nbranch.<br />\n<strong><em>Notice:</em></strong> The scripts create a folder in the parent directory of your execution path. If your user is not assigned to\nthe docker-group and you start the script with <code>sudo</code>, the new folder is only accessible by root. On staging, we have \ncreated a folder, named <code>Pool</code> and copied the repository into it. </p>\n<p>For Ubuntu:</p>\n<pre><code class=\"lang-bash\">    mkdir ~/directory-name\n    cd ~/directory-name\n    git clone -b develop https://github.com/Viva-con-Agua/pool2-deployment-scripts.git\n</code></pre>\n<p>Now, <code>directory-name</code> contains the <code>pool2-deployment-scripts</code> directory containing all important setup scripts. Especially, \nthere you can find the <code>pool.sh</code> which works as control script. </p>\n<p>Controlling the application requires three commands:</p>\n<ol>\n<li>You can start the pool in dev mode with <code>./pool.sh dev setup</code></li>\n<li>You can delete the pool with <code>./pool.sh clean setup</code></li>\n<li>You can completely delete the pool with <code>./pool.sh cleanfull setup</code></li>\n</ol>\n<p><strong><em>Notice:</em></strong> The docker service needs root access except the user is not in the docker-group<br />\n<strong><em>Attention!</em></strong> On <code>cleanfull setup</code> also the database docker container and the Pool² sub-network (<code>pool-network</code>) will\nbe deleted. All your data will be lost. </p>\n<p>After startup, the Pool² should be available at <code>http://localhost</code>.</p>\n<p>The scripts also initiate a Pool² sub-network, called <code>pool-network</code>. Every started docker can be assigned to an IP address\nin range of this network. You can find all IPs with <code>docker network inspect pool-network</code>.</p>\n<h2 id=\"read-the-logs\">Read the Logs</h2>\n<p>In some cases, you need to read the logs. For this purpose, you can use the given scripts: <code>./pool.sh logs microservice_name</code>. So, if everything works, you have to register your first user on <em>Drops</em>. Activation of your account requires to use a link that has sent you by email. On a development system, a mockup email server is used, writing the email to the logs of <em>Drops</em>. Thus you can call the link from the logs by <code>./pool.sh logs drops</code>.</p>\n<h2 id=\"setup-your-own-microservice\">Setup your own Microservice</h2>\n<p>Next to the microservices implementing functional requirements, there is also a number of microservices and docker \ncontainer running, implementing non-functional requirements:</p>\n<ul>\n<li><a href=\"https://www.nginx.com/\">Nginx</a> docker serving as a Reverse-Proxy to redirect incoming requests into the <code>pool-network</code></li>\n<li><a href=\"https://nats.io/\">nats</a> docker hosts a message broker, that is used by the microservices for event-based communication</li>\n<li><strong>Dispenser</strong> docker that handles templates, as described by the <a href=\"concepts/ui/fragment/composition\">UI-Fragment-Composition concept</a></li>\n</ul>\n<p>The <a href=\"https://www.nginx.com/\">Nginx</a> docker is also listening at <code>localhost:8080</code>. Thus, you can deploy your microservice \nat port <code>8080</code> and all docker container in range of <code>pool-network</code> will have access to it. Furthermore, the content \ngenerated by your microservice will be accessible at <code>http://localhost/sozmed</code>.   </p>\n<h2 id=\"setup-more-docker\">Setup more docker</h2>\n<p>In case you need a database or any additional stuff, it can be easily deployed as a docker container in our <code>pool-network</code>. \nSimply add the <code>--net</code> parameter appended to the <code>run</code> command. For example, if you want to deploy <a href=\"https://mariadb.org/\">mariadb</a>: </p>\n<pre><code class=\"lang-bash\">    docker run --name ms-mariadb --net pool-network -d maria\n</code></pre>\n<p>This will setup a <a href=\"https://mariadb.org/\">mariadb</a> with a <code>pool-network</code> IP. The subnet is defined in range of the IP-Space \n172.2.0.0/16. The <code>-d</code> parameter starts the docker as daemon in the background. You can read the logs using \n<code>docker logs ms-mariadb</code> and also can get <code>bash</code> access using <code>docker exec -it ms-mariadb bash</code>. \nOtherwise, it is also possible to setup your docker with a static IP or forward ports to the localhost. For example:</p>\n<pre><code class=\"lang-bash\">    docker run --net pool-network --ip 172.2.30.1 -p 4000:3306 -d maria\n\n</code></pre>\n<p>The database can now be accessed on the IP <code>172.2.30.1:3306</code> or on <code>localhost:4000</code>. The <code>-p</code> parameter links the \nlocalhosts port 4000 to the docker containers port 3306.</p>\n<p><strong>Author:</strong> <a href=\"https://cses.informatik.hu-berlin.de/members/dennis.kleber/\">Dennis Kleber</a>, <a href=\"https://cses.informatik.hu-berlin.de/members/johann.sell/\">Johann Sell</a> -- \n<strong>Created:</strong> 2018-06-05 --\n<strong>Updated:</strong> 2018-06-11</p>\n"}}}
