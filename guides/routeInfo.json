{"path":"guides","templateID":6,"sharedPropsHashes":{},"localProps":{"guides":[{"title":"Deploy Pool² for Development","slug":"guide/deployment","contents":"<h1 id=\"deploy-pool-for-development\">Deploy Pool² for Development</h1>\n<h2 id=\"install-docker\">Install Docker</h2>\n<p>The Pool² implements its microservice architecture using <a href=\"https://www.docker.com/\">docker</a> that can easily setup on the \nmost operating systems. Guides can be found at the <a href=\"https://docs.docker.com/install/\">docker documentation</a>. You need to \ninstall the <code>docker-ce</code> package. Don&#39;t worry about stage and edge version, it works fine with both. The staging server \nuses <a href=\"https://www.debian.org/index.de.html\">debian</a> as operating system. If you want to deploy the Pool² as development \nsystem it makes sense to setup a virtual machine (VM) via <a href=\"https://www.virtualbox.org/\">VirtualBox</a> or \n<a href=\"https://www.vmware.com/de.html\">vmware</a>. There are a lot of guides online, that can help you to setup a VM.<br />\n<strong><em>Notice:</em></strong> The scripts you need to setup the Pool² development system are written for <code>bash</code> on a linux system.</p>\n<p>After setting up the VM and docker-ce, you can start the docker service using <code>sudo systemctl start docker.service</code>. Next \nyour system user need access to docker.service. </p>\n<p>For Ubuntu:</p>\n<pre><code class=\"lang-bash\">    sudo groupadd docker\n    sudo useradd username\n    sudo usermod -aG docker username \n</code></pre>\n<p>(Replace <code>username</code>)</p>\n<h2 id=\"using-the-pool-scripts\">Using the Pool² scripts</h2>\n<p>For deployment of the Pool², you can use the <a href=\"https://github.com/Viva-con-Agua/pool2-deployment-scripts\">pool2-deployment-scripts</a>. \nThese scripts are hosted on <a href=\"https://github.com/\">GitHub</a>. If you want to deploy for development, you need the <code>develop</code> \nbranch.<br />\n<strong><em>Notice:</em></strong> The scripts create a folder in the parent directory of your execution path. If your user is not assigned to\nthe docker-group and you start the script with <code>sudo</code>, the new folder is only accessible by root. On staging, we have \ncreated a folder, named <code>Pool</code> and copied the repository into it. </p>\n<p>For Ubuntu:</p>\n<pre><code class=\"lang-bash\">    mkdir ~/directory-name\n    cd ~/directory-name\n    git clone -b develop https://github.com/Viva-con-Agua/pool2-deployment-scripts.git\n</code></pre>\n<p>Now, <code>directory-name</code> contains the <code>pool2-deployment-scripts</code> directory containing all important setup scripts. Especially, \nthere you can find the <code>pool.sh</code> which works as control script. </p>\n<p>Controlling the application requires three commands:</p>\n<ol>\n<li>You can start the pool in dev mode with <code>./pool.sh dev setup</code></li>\n<li>You can delete the pool with <code>./pool.sh clean setup</code></li>\n<li>You can completely delete the pool with <code>./pool.sh cleanfull setup</code></li>\n</ol>\n<p><strong><em>Notice:</em></strong> The docker service needs root access except the user is not in the docker-group<br />\n<strong><em>Attention!</em></strong> On <code>cleanfull setup</code> also the database docker container and the Pool² sub-network (<code>pool-network</code>) will\nbe deleted. All your data will be lost. </p>\n<p>After startup, the Pool² should be available at <code>http://localhost</code>.</p>\n<p>The scripts also initiate a Pool² sub-network, called <code>pool-network</code>. Every started docker can be assigned to an IP address\nin range of this network. You can find all IPs with <code>docker network inspect pool-network</code>.</p>\n<h2 id=\"read-the-logs\">Read the Logs</h2>\n<p>In some cases, you need to read the logs. For this purpose, you can use the given scripts: <code>./pool.sh logs microservice_name</code>. So, if everything works, you have to register your first user on <em>Drops</em>. Activation of your account requires to use a link that has sent you by email. On a development system, a mockup email server is used, writing the email to the logs of <em>Drops</em>. Thus you can call the link from the logs by <code>./pool.sh logs drops</code>.</p>\n<h2 id=\"setup-your-own-microservice\">Setup your own Microservice</h2>\n<p>Next to the microservices implementing functional requirements, there is also a number of microservices and docker \ncontainer running, implementing non-functional requirements:</p>\n<ul>\n<li><a href=\"https://www.nginx.com/\">Nginx</a> docker serving as a Reverse-Proxy to redirect incoming requests into the <code>pool-network</code></li>\n<li><a href=\"https://nats.io/\">nats</a> docker hosts a message broker, that is used by the microservices for event-based communication</li>\n<li><strong>Dispenser</strong> docker that handles templates, as described by the <a href=\"concepts/ui/fragment/composition\">UI-Fragment-Composition concept</a></li>\n</ul>\n<p>The <a href=\"https://www.nginx.com/\">Nginx</a> docker is also listening at <code>localhost:8080</code>. Thus, you can deploy your microservice \nat port <code>8080</code> and all docker container in range of <code>pool-network</code> will have access to it. Furthermore, the content \ngenerated by your microservice will be accessible at <code>http://localhost/sozmed</code>.</p>\n<p>Your microservice needs to handle the base path. There are several implementations and the configuration depends on your \ntechnology. If you are using <a href=\"https://webpack.js.org/\">webpack</a>, you can add the following to your config to set the base\npath to <code>sozmed</code>:</p>\n<pre><code class=\"lang-javascript\">devServer: {\n  proxy: {\n    &#39;**&#39;: {\n      pathRewrite: {&#39;^/&#39;: &#39;/sozmed/&#39;}\n    }\n  }\n}\n</code></pre>\n<h2 id=\"setup-more-docker\">Setup more docker</h2>\n<p>In case you need a database or any additional stuff, it can be easily deployed as a docker container in our <code>pool-network</code>. \nSimply add the <code>--net</code> parameter appended to the <code>run</code> command. For example, if you want to deploy <a href=\"https://mariadb.org/\">mariadb</a>: </p>\n<pre><code class=\"lang-bash\">    docker run --name ms-mariadb --net pool-network -d maria\n</code></pre>\n<p>This will setup a <a href=\"https://mariadb.org/\">mariadb</a> with a <code>pool-network</code> IP. The subnet is defined in range of the IP-Space \n172.2.0.0/16. The <code>-d</code> parameter starts the docker as daemon in the background. You can read the logs using \n<code>docker logs ms-mariadb</code> and also can get <code>bash</code> access using <code>docker exec -it ms-mariadb bash</code>. \nOtherwise, it is also possible to setup your docker with a static IP or forward ports to the localhost. For example:</p>\n<pre><code class=\"lang-bash\">    docker run --net pool-network --ip 172.2.30.1 -p 4000:3306 -d maria\n\n</code></pre>\n<p>The database can now be accessed on the IP <code>172.2.30.1:3306</code> or on <code>localhost:4000</code>. The <code>-p</code> parameter links the \nlocalhosts port 4000 to the docker containers port 3306.</p>\n<p><strong>Author:</strong> <a href=\"https://cses.informatik.hu-berlin.de/members/dennis.kleber/\">Dennis Kleber</a>, <a href=\"https://cses.informatik.hu-berlin.de/members/johann.sell/\">Johann Sell</a> -- \n<strong>Created:</strong> 2018-06-05 --\n<strong>Updated:</strong> 2018-06-11</p>\n"},{"title":"OAuth2 handshake","slug":"ouath2-handshake","contents":"<h1 id=\"oauth2-handshake\">OAuth2 handshake</h1>\n<p>Setting up the OAuth2 handshake requires two steps: (1) You have to register your microservice as an OAuth2 client in \n<em>Drops</em>. To do so, you have to contact the administrator of the Pool² and please her / him to add your microservice to \nthe <em>Drops</em> database. If you setup a development system, you are the administrator by yourself. In that case consider \nthe description below. (2) You have to implement your part of the handshake.</p>\n<h2 id=\"setup-a-microservice-as-oauth2-client-in-drops\">Setup a microservice as OAuth2 client in <em>Drops</em></h2>\n<p>First, you have to log into <em>Drops</em> as an administrator. See <a href=\"/guides/setup-admin/\">Setup administrator</a> to configure \nyour user as an administrator. \nSecond, create the microservice as a OAuth2 client: Open the appropriate form using the menu and enter an <strong>ID</strong>, a \n<strong>Secret</strong>, a <strong>Redirect URL</strong>, and a <strong>Grant type</strong> for the new service. </p>\n<p>The <strong>ID</strong> can be any unique identifier, for example the microservices name. The <strong>Secret</strong> should be known only to \n<em>Drops</em> and the new microservice. Thus, I would recommend to generate a key using <a href=\"https://keepass.info/\">KeePass</a> enter \nit into the form, save it in a KeePass database, and enter it to the microservices deployment configuration. The <strong>Redirect\nURL</strong> will be defined by the microservice developer and should be given the Pool² admin. The given URL identifies the \nendpoint that is used by <em>Drops</em> to redirect the users client back, if the authorization code has been successfully \ncreated. The chosen <strong>Grant types</strong> define the possible authorization workflows possible between <em>Drops</em> and the \nmicroservice. Currently, <em>Drops</em> allows only <code>authorization code</code>.</p>\n<h2 id=\"protocol-flow\">Protocol flow</h2>\n<p>The <a href=\"https://tools.ietf.org/html/rfc6749\">RFC 6749</a> defines multiple possible interactions between clients and OAuth \nprovider. A general workflow is defined in §1.2 of the protocol. </p>\n<p><em>Drops</em> implements the <code>authorization code</code> handshake. Thus, the client has to redirect to <em>Drops</em>, which redirects the\nuser to the login page, if no session exists. Otherwise, <em>Drops</em> will validate the requesting microservice, generates an\n<code>authorization code</code>, and redirects back to the requesting microservice with the <code>authorization code</code> attached. Using \nthis code, the service is able to request an <code>access token</code> that can be used to query information about <em>Drops</em> currently \nlogged in user. At this point, the microservice is able to create its own user session. Handling of this additional user\nsession should be synchronized with the <em>Drops</em> session, thus we implemented a so called <em>OAuth message broker</em>.</p>\n<p><img src=\"/oauth2-handshake.png\" alt=\"OAuth2 handshake sequence diagram\" title=\"Figure 1: Describes the calls and redirects between the users\nclient, the microservice and _Drops_. Please consider that there are no special cases, e.g. if the user has not already \nlogged into _Drops_ or error cases.\"></p>\n<h2 id=\"endpoints\">Endpoints</h2>\n<p>Implementation of the OAuth2 handshake requires to know the endpoints of <em>Drops</em>, but also to know which enpoints have to\nbe implemented.</p>\n<p>The following endpoints of <em>Drops</em> can be used:</p>\n<pre><code>drops.authorization.code    =   ${drops.url.base}/oauth2/code/get/${ID}\ndrops.access.token          =   ${drops.url.base}/oauth2/access_token\ndrops.get.profile           =   ${drops.url.base}/oauth2/rest/profile?access_token=%sa\n</code></pre><p>You have to replace the <code>${drops.url.base}</code> by the host and potentially path to the deployed <em>Drops</em> microservice.</p>\n<p>There are some parameter to consider. First, to get an <code>authorization_code</code> <em>Drops</em> needs to identify your service. For \nthis purpose, add the <strong>ID</strong> of your microservice as a path parameter: <code>${drops.url.base}/oauth2/code/get/${ID}</code>. </p>\n<p>The access token endpoint expects some query parameter: <code>grant_type</code>, <code>client_id</code>, <code>client_secret</code>, <code>redirect_uri</code>, and \n<code>code</code>. While the <code>grant_type</code> has to be the currently chosen one (e.g. <code>authorization_code</code>), the next three parameter \nidentify the microservice and have to be the same as added to <em>Drops</em>. The <code>code</code> parameter has to contain the received \n<code>authorization code</code>.</p>\n<p>Last, requesting the profile information requires to hold a valid <code>access token</code> that has to be attached to the request \nas a query parameter.</p>\n<p>Additionally, you have to prepare an endpoint by yourself, that takes an <code>authorization_code</code> and initiate the next step\nusing the <code>authorization_code</code>. <em>Drops</em> appends the <code>authorization_code</code> to the given <strong>Redirect URL</strong>, thus you are free\nto design your URLs. Example endpoints: <code>https://ms.de/</code> (takes the code as part of the path), or <code>https://ms.de?code=</code> \n(expects the code as a query parameter with the name <code>code</code>). </p>\n<h2 id=\"example\">Example</h2>\n<p>An example controller implemented using <a href=\"https://www.playframework.com/\">Play2 Framework</a> and written in \n<a href=\"https://www.scala-lang.org/\">Scala</a> could have the following functions:</p>\n<pre><code class=\"lang-scala\">package controllers\n\nimport javax.inject._\n\nimport models.AccessToken\nimport play.api._\nimport play.api.libs.json.Json\nimport play.api.mvc._\nimport play.api.libs.ws._\nimport play.api.Configuration\n\nimport scala.concurrent.ExecutionContext\nimport scala.concurrent.ExecutionContext.Implicits.global\n\n\nclass HomeController @Inject() (ws: WSClient,conf : Configuration) extends Controller {\n\n  /**\n   * Create an Action to render an HTML page with a welcome message.\n   * The configuration in the `routes` file means that this method\n   * will be called when the application receives a `GET` request with\n   * a path of `/`.\n   */\n  def index = Action {\n    Ok(views.html.index(&quot;Your new application is ready.&quot;))\n  }\n\n  def login = Action {\n    val url = conf.getString(&quot;drops.url.base&quot;).get + conf.getString(&quot;drops.url.code&quot;).get +\n      conf.getString(&quot;drops.client_id&quot;).get\n    Redirect(url)\n  }\n\n  def receiveCode(code: String) = Action.async {\n    val url = conf.getString(&quot;drops.url.base&quot;).get + conf.getString(&quot;drops.url.accessToken&quot;).get\n    val clientId = conf.getString(&quot;drops.client_id&quot;).get\n    val clientSecret = conf.getString(&quot;drops.client_secret&quot;).get\n\n    val accessToken = ws.url(url).withQueryString(\n      &quot;grant_type&quot; -&gt; &quot;authorization_code&quot;,\n      &quot;client_id&quot; -&gt; clientId,\n      &quot;client_secret&quot; -&gt; clientSecret,\n      &quot;code&quot; -&gt; code,\n      &quot;redirect_uri&quot; -&gt; &quot;http://localhost:8080/endpoint?code=&quot;\n    ).get().map(response =&gt; response.status match {\n      case 200 =&gt; AccessToken(response.json)\n      case _ =&gt; println(response.status);throw new Exception \n                // Todo: throw meaningful exception considering the returned error message and status code!\n    })\n\n    accessToken.flatMap(token =&gt; {\n      val url = conf.getString(&quot;drops.url.base&quot;).get + conf.getString(&quot;drops.url.profile&quot;).get\n\n      ws.url(url).withQueryString(\n        &quot;access_token&quot; -&gt; token.content\n      ).get().map(response =&gt; response.status match {\n        case 200 =&gt; Ok(\n          Json.obj(&quot;status&quot; -&gt; &quot;success&quot;, &quot;code&quot; -&gt; code, &quot;token&quot; -&gt; token.content, &quot;user&quot; -&gt; response.json)\n        )\n        case _ =&gt; Ok(\n          Json.obj(&quot;status&quot; -&gt; &quot;error&quot;, &quot;code&quot; -&gt; code, &quot;token&quot; -&gt; token.content, &quot;response-status&quot; -&gt; response.status)\n        )\n      })\n    })\n  }\n}\n</code></pre>\n<p><strong>Author:</strong> <a href=\"https://cses.informatik.hu-berlin.de/members/johann.sell/\">Johann Sell</a> -- \n<strong>Created:</strong> 2018-06-29 --\n<strong>Updated:</strong> 2018-06-29</p>\n"},{"title":"Edit the documentation","slug":"edit-docu","contents":"<h1 id=\"edit-the-documentation\">Edit the documentation</h1>\n<p>This page is hosted using <a href=\"https://pages.github.com/\">GitHub Pages</a>. The project for deployment can be pulled here: \n<a href=\"https://github.com/Viva-con-Agua/Viva-con-Agua.github.io\">Viva-con-Agua.github.io</a>. Additionally, there is a second \nproject <a href=\"https://github.com/Viva-con-Agua/documentation\">documentation</a> that is used to generate the content for github \npages.</p>\n<p>The <a href=\"https://github.com/Viva-con-Agua/documentation\">documentation</a> is implemented using \n<a href=\"https://github.com/nozzle/react-static\">react-static</a> and the \n<a href=\"https://github.com/nozzle/react-static/tree/master/examples/markdown\">markdown template</a>.\nThus we can use <a href=\"https://www.markdownguide.org/\">markdown</a> to write the documentation and <a href=\"https://reactjs.org/\">React</a> \nto present it.</p>\n<h2 id=\"getting-started\">Getting started</h2>\n<p>Please install all requirements considering <a href=\"https://github.com/nozzle/react-static#quick-start\">react-static quick start</a>\nand follow these steps:</p>\n<ol>\n<li>Clone or pull the <a href=\"https://github.com/Viva-con-Agua/documentation\">documentation</a> repository.</li>\n<li>Clone or pull the <a href=\"https://github.com/Viva-con-Agua/Viva-con-Agua.github.io\">https://viva-con-agua.github.io/</a> repository. </li>\n<li>Add or edit a markdown file in <code>content</code>.</li>\n<li>Execute <code>yarn start</code> for testing purpose. </li>\n<li>Execute <code>yarn build</code> to generate the deployable content. </li>\n<li>Commit your changes (except the <code>dist</code> folder) using <code>git add</code>, <code>git commit -m &quot;added guide for xy&quot;</code> and \n<code>git push origin master</code> </li>\n<li>Copy the content of your dist folder to the root directory of your <a href=\"https://viva-con-agua.github.io/\">https://viva-con-agua.github.io/</a>\nclone. </li>\n<li>Commit and push your changes and give a short description of your changes in your commit message.</li>\n</ol>\n<p>Et voilà, the changes are deployed on <a href=\"https://viva-con-agua.github.io/\">https://viva-con-agua.github.io/</a>.</p>\n<h2 id=\"style-guide\">Style Guide</h2>\n<p>Please enter an author and a creation or update date at the bottom of every page.</p>\n<h2 id=\"structure-of-the-documentation\">Structure of the documentation</h2>\n<p>There are different types of documentation we want to provide. We describe our high level problems and conceptual \nsolutions in the section <a href=\"/concepts\">concepts</a>. The section \n<a href=\"/guides\">guides</a> contains concrete implementations of the solutions from \n<a href=\"/concepts\">concepts</a>. Here you can find how to implement solutions in specific \ntechnologies and Getting Started guides for plugins.</p>\n<p>In <a href=\"/rest\">rest interfaces</a> you can find a documentation of all RESTful interfaces \nprovided by any microservice. So you know how to get the information required to implement your use case.</p>\n<p>Best place to start is our <a href=\"/\">introduction</a> and the \n<a href=\"/concepts\">concepts</a> page. Happy coding!</p>\n<p><strong>Author:</strong> <a href=\"https://cses.informatik.hu-berlin.de/members/johann.sell/\">Johann Sell</a> -- \n<strong>Created:</strong> 2018-05-18 --\n<strong>Updated:</strong> 2018-05-29</p>\n"},{"title":"Setup administrator","slug":"setup-admin","contents":"<h1 id=\"setup-administrator\">Setup administrator</h1>\n<p>Setting up an user as administrator requires access to <em>Drops</em> database. Connect to the database docker using </p>\n<pre><code class=\"lang-bash\">docker exec -it drops-mariadb mysql -u drops -p\n</code></pre>\n<p>enter the password of the drops database user and switch to the database used by <em>Drops</em> (default: <code>drops</code>). Select all\nuser saved in the database </p>\n<pre><code class=\"lang-sql\">SELECT * FROM User;\n</code></pre>\n<p>Now, choose the user that has to be administrator and update the user with the following command:</p>\n<pre><code class=\"lang-sql\">UPDATE User SET `roles` = &#39;supporter,admin&#39; WHERE `id` = 1;\n</code></pre>\n<p>(replace the <code>id</code> with the ID of teh chosen user!)</p>\n<p><strong>Author:</strong> <a href=\"https://cses.informatik.hu-berlin.de/members/johann.sell/\">Johann Sell</a> -- \n<strong>Created:</strong> 2018-06-29 --\n<strong>Updated:</strong> 2018-06-29</p>\n"}]}}
